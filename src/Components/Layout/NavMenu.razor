@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@using AzureNamingTool.Components.General
@inject StateContainer state
@inject ProtectedSessionStorage session
@inject IJSRuntime JsRuntime
@inject ILogger<NavMenu> Logger
@inject ProtectedLocalStorage storage
@inject NavigationManager NavigationManager

<div class="top-row ps-2 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/"><img src="images/AzureNamingToolLogo-NoText.png" height="20" style="vertical-align:top;margin-top:2px;padding-right:10px;" alt="Azure Naming Tool" />Azure Naming Tool</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" style="background-color:#004494" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="admin">
                <span class="oi oi-lock-locked" aria-hidden="true"></span> Admin
            </NavLink>
        </div>
        @if (admin)
        {
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="adminlog">
                    <span class="oi oi-box" aria-hidden="true"></span> Admin Log
                </NavLink>
            </div>
        }
        @if (Convert.ToBoolean(config.InstructionsEnabled) || admin)
        {
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="instructions">
                <span class="oi oi-info" aria-hidden="true"></span> Instructions
            </NavLink>
        </div>
        }
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="configuration">
                <span class="oi oi-cog" aria-hidden="true"></span> Configuration
            </NavLink>
        </div>
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="reference">
                <span class="oi oi-spreadsheet" aria-hidden="true"></span> Reference
            </NavLink>
        </div>
        <div class="nav-item px-2">
            <NavLink class="nav-link" href="generate">
                <span class="oi oi-check" aria-hidden="true"></span> Generate
            </NavLink>
        </div>
        @if (Convert.ToBoolean(config.GeneratedNamesLogEnabled) || admin)
        {
            <div class="nav-item px-2">
                <NavLink class="nav-link" href="generatednameslog">
                <span class="oi oi-list" aria-hidden="true"></span> Generated Names Log
            </NavLink>
        </div>
        }

        @if (GeneralHelper.IsNotNull(PageType))
        {
            @if (PageType.ToString() == "AzureNamingTool.Components.Pages.Configuration")
            {
                <div class="card bg-transparent">
                    <div class="card card-header bg-default text-white" style="font-weight:bold;">
                        Jump To
                    </div>
                    <div class="card bg-transparent">
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("ResourceComponent"))' @onclick:preventDefault href="">Components</a>
                        </div>
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("ResourceDelimiter"))' @onclick:preventDefault href="">Delimiters</a>
                        </div>
                        @if (GeneralHelper.IsNotNull(servicesData.ResourceComponents))
                        {
                            @foreach (ResourceComponent resourceComponent in servicesData.ResourceComponents.OrderBy(x => x.Name))
                            {
                                @if (resourceComponent.Name != "ResourceInstance")
                                {
                                    <div class="nav-item px-2">
                                        <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick(resourceComponent.Name))' @onclick:preventDefault href="">@(resourceComponent.DisplayName)</a>
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
            }
            @if (PageType.ToString() == "AzureNamingTool.Components.Pages.Instructions")
            {
                <div class="card bg-transparent">
                    <div class="card card-header bg-default text-white" style="font-weight:bold;">
                        Jump To
                    </div>
                    <div class="card bg-transparent">
                        @if (admin)
                        {
                            <div class="nav-item px-2">
                                <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("adminpasswordcontainer"))' @onclick:preventDefault href="">Global Admin Password</a>
                            </div>
                            <div class="nav-item px-2">
                                <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("adminconfigurationcontainer"))' @onclick:preventDefault href="">Admin Configuration</a>
                            </div>
                            <div class="nav-item px-2">
                                <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("adminlogcontainer"))' @onclick:preventDefault href="">Admin Log</a>
                            </div>
                        }
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("configurationcontainer"))' @onclick:preventDefault href="">Configuration</a>
                        </div>
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("generatecontainer"))' @onclick:preventDefault href="">Generate</a>
                        </div>
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("generatednameslogcontainer"))' @onclick:preventDefault href="">Generated Names Log</a>
                        </div>
                        <div class="nav-item px-2">
                            <a class="text-decoration-none nav-link" @onclick='(() => OnConfigNavClick("referencecontainer"))' @onclick:preventDefault href="">Reference</a>
                        </div>
                    </div>
                </div>
            }

            @if ((PageType.ToString() == "AzureNamingTool.Components.Pages.Index") && (connected) && Convert.ToBoolean(config.LatestNewsEnabled))
            {
                <hr />
                <div class="nav-item px-2">
                    <div class="nav-link">
                        <label title="Latest News" style="font-weight:bold;">
                            Latest News
                        </label>
                        <label class="switch" title="Latest News Switch" style="top:-5px; float:right;">
                            <input type="checkbox" checked="@latestnewsenabled" @oninput="NewsChanged">
                            <span class="slider round"></span>
                        </label>
                        <div style="clear:both"></div>
                        @if (latestnewsenabled)
                        {
                            <div classclass="nav-link" style="padding-top:10px">
                                <LatestNews></LatestNews>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </nav>
</div>

@code {
    [Parameter]
    public Type? PageType { get; set; }
    private bool collapseNavMenu = true;
    private ServicesData servicesData = new();
    private SiteConfiguration config = ConfigurationHelper.GetConfigurationData();
    private bool admin;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : String.Empty;
    private bool latestnewsenabled = true;
    private bool connected = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var result = await session.GetAsync<bool>("admin");
        admin = (bool)result.Value;
        if (firstRender)
        {
            if (await ConfigurationHelper.VerifyConnectivity())
            {
                servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
                try
                {
                    result = await storage.GetAsync<bool>("latestnewsenabled");
                    latestnewsenabled = result.Success ? result.Value : true;
                }
                catch
                {
                    latestnewsenabled = true;
                }
                state.LatestNewsEnabled = latestnewsenabled;
            }
            else
            {
                connected = false;
            }
            StateHasChanged();
        }
        else
        {
            if ((GeneralHelper.IsNotNull(servicesData)) || (state._reloadnav))
            {
                servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
                state.SetNavReload(false);
            }
        }
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void OnConfigNavClick(string e)
    {
        await JsRuntime.InvokeVoidAsync("scrollIntoView", e);
    }

    private async void NewsChanged(ChangeEventArgs e)
    {
        if (GeneralHelper.IsNotNull(e.Value))
        {
            latestnewsenabled = (bool)e.Value;
            await storage.SetAsync("newsenabled", latestnewsenabled);
            state.LatestNewsEnabled = latestnewsenabled;
            StateHasChanged();
        }
    }
}
