@using AzureNamingTool.Helpers
@using AzureNamingTool.Models
@inject StateContainer state
@inject IHttpContextAccessor httpContextAccessor;
@{
    //Layout = "_Layout";

    // Verify the site configration files are present
    ConfigurationHelper.VerifyConfiguration(state);
    ConfigurationHelper.VerifySecurity(state);

    var identityProviderDetails = new IdentityProviderDetails();
    //Check if there is an HttpContext object
    if (GeneralHelper.IsNotNull(httpContextAccessor))
    {
        if (GeneralHelper.IsNotNull(httpContextAccessor.HttpContext!.Request.Headers))
        {
            // Get the Identity provider, if using Azure App Service Authentication
            if (httpContextAccessor.HttpContext.Request.Headers.ContainsKey("X-MS-CLIENT-PRINCIPAL-IDP"))
            {
                // Set the identity provider
                identityProviderDetails.CurrentIdentityProvider = httpContextAccessor.HttpContext.Request.Headers["X-MS-CLIENT-PRINCIPAL-IDP"]!;
            }
        }

        // Check if there is an IdentityHeaderName set
        if (!String.IsNullOrEmpty(ConfigurationHelper.GetAppSetting("IdentityHeaderName", true)))
        {
            string headername = ConfigurationHelper.GetAppSetting("IdentityHeaderName", true);
            // Check if the IdentityHeaderName header is present
            if (GeneralHelper.IsNotNull(httpContextAccessor.HttpContext))
            {
                if (GeneralHelper.IsNotNull(httpContextAccessor.HttpContext.Request))
                {
                    if (GeneralHelper.IsNotNull(httpContextAccessor.HttpContext.Request.Headers))
                    {
                        if (httpContextAccessor.HttpContext.Request.Headers.ContainsKey(headername))
                        {
                            // Set the current user
                            identityProviderDetails.CurrentUser = httpContextAccessor.HttpContext.Request.Headers[headername]!;
                        }
                    }
                }
            }
        }
    }
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/">
    <link href="css/bootstrap/bootstrap.min.css" rel="stylesheet">
    <link href="css/site.css" rel="stylesheet" />
    <link href="AzureNamingTool.styles.css" rel="stylesheet" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>

<body>
    <Routes @rendermode="InteractiveServer" identityProviderDetails="identityProviderDetails" />
    <script src="_framework/blazor.web.js"></script>
    <script src="js/jquery-3.7.0.min.js"></script>
    <script src="js/bootstrap.bundle.min.js"></script>
</body>

</html>
<script>

    //Get the button:
    scrollToTop = document.getElementById("btnScrollToTop");

    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            scrollToTop.style.display = "block";
        } else {
            scrollToTop.style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0; // For Safari
        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    }

    function scrollIntoView(id) {
        const element = document.getElementById(id);
        var headerOffset = 70;
        var elementPosition = element.getBoundingClientRect().top;
        var offsetPosition = elementPosition + window.pageYOffset - headerOffset;

        window.scrollTo({
            top: offsetPosition,
            behavior: "smooth"
        });
    }

    window.IsElementChecked = (id) => {
        console.log(id);
        console.log(document.getElementById(id));
        console.log(document.getElementById(id).checked);
        return document.getElementById(id).checked;
    };

    function htmlToCSV(filename, tableclass = "") {
        var data = [];
        var rows;
        if (tableclass != "") {
            rows = document.querySelectorAll("table[class*=" + tableclass + "] tr ");
        }
        else {
            rows = document.querySelectorAll("table tr");
        }

        for (var i = 0; i < rows.length; i++) {
            var row = [], cols = rows[i].querySelectorAll("td, th");

            for (var j = 0; j < cols.length; j++) {
                row.push(cols[j].innerText.replace(/(\r\n|\n|\r)/gm, "|"));
            }

            data.push(row.join(","));
        }
        downloadCSVFile(data.join("\n"), filename);
    }

    function downloadCSVFile(csv, filename) {
        var csv_file, download_link;
        csv_file = new Blob([csv], { type: "text/csv" });
        download_link = document.createElement("a");
        download_link.download = filename;
        download_link.href = window.URL.createObjectURL(csv_file);
        download_link.style.display = "none";
        document.body.appendChild(download_link);
        download_link.click();
    }

    function loadJs(sourceUrl) {
        if (sourceUrl.Length == 0) {
            console.error("Invalid source URL");
            return;
        }

        var tag = document.createElement('script');
        tag.src = sourceUrl;
        tag.type = "text/javascript";

        tag.onload = function () {
            console.log("Script loaded successfully");
        }

        tag.onerror = function () {
            console.error("Failed to load script");
        }

        document.body.appendChild(tag);
    }

    function ShowAlert(message) {
        alert(message);
    }

    function checkboxConfirmChange(checkbox, message) {
        if (checkbox.checked) {
            var confirmBox = confirm(message);

            if (confirmBox == true) {
                checkbox.checked = true;
            }
            else {
                checkbox.checked = false;
            };
        }
    }

    function addPopovers() {
        $("#dropdownMenu").on("show.bs.dropdown", function () {
            // For difference between offset and position: http://stackoverflow.com/a/3202038/44852
            var dropdownButtonPosition = $(this).position();
            var dropdownButtonOffset = $(this).offset();
            var dropdownButtonHeight = $(this).height();
            var dropdownMenu = $(this).find(".dropdown-menu:first");
            var dropdownMenuHeight = dropdownMenu.height();
            var scrollToTop = $(document).scrollTop();

            // It seems there are some numbers that don't get included so I am using some tolerance for
            // more accurate result.
            var heightTolerance = 17;

            // I figured that window.innerHeight works more accurate on Chrome
            // but it is not available on Internet Explorer. So I am using $(window).height()
            // method where window.innerHeight is not available.
            var visibleWindowHeight = window.innerHeight || $(window).height();

            var totalHeightDropdownOccupies = dropdownMenuHeight +
                dropdownButtonOffset.top + dropdownButtonHeight + heightTolerance - scrollToTop;

            // If there is enough height for dropdown to fully appear, then show it under the dropdown button,
            // otherwise show it above dropdown button.
            var dropdownMenuTopLocation = totalHeightDropdownOccupies < visibleWindowHeight
                ? dropdownButtonPosition.top + dropdownButtonHeight
                : dropdownButtonPosition.top - dropdownMenuHeight - dropdownButtonHeight + heightTolerance;

            dropdownMenu.css("left", dropdownButtonPosition.left)
                .css("top", dropdownMenuTopLocation);
        });
    }
</script>
